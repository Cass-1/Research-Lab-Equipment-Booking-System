generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  role          Role           @default(USER)
  Reservations  Reservations[]
  approvedLogs  UsageLog[]     @relation("ApprovedByUser")
  requestedLogs UsageLog[]     @relation("RequestedByUser")
  labs          UserLab[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Lab {
  id             String         @id @default(cuid())
  name           String
  description    String?
  imageUrl       String?
  equipmentCount Int?           @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  equipment      Equipment[]
  Reservations   Reservations[]
  usageLogs      UsageLog[]
  users          UserLab[]
}

model UserLab {
  userId String
  labId  String
  lab    Lab    @relation(fields: [labId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, labId])
}

model Equipment {
  id           String         @id @default(cuid())
  name         String
  description  String?
  labId        String
  lab          Lab            @relation(fields: [labId], references: [id], onDelete: Cascade)
  Reservations Reservations[]
  usageLogs    UsageLog[]
}

model Reservations {
  id          String            @id @default(cuid())
  equipmentId String
  userId      String
  date        DateTime
  labId       String
  status      ReservationStatus
  equipment   Equipment         @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  lab         Lab               @relation(fields: [labId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageLog    UsageLog?
}

model UsageLog {
  id            String            @id @default(cuid())
  equipmentId   String
  labId         String
  reservationId String            @unique
  requestedById String
  approvedById  String
  status        ReservationStatus
  timestamp     DateTime          @default(now())
  approvedBy    User              @relation("ApprovedByUser", fields: [approvedById], references: [id])
  equipment     Equipment         @relation(fields: [equipmentId], references: [id])
  lab           Lab               @relation(fields: [labId], references: [id])
  requestedBy   User              @relation("RequestedByUser", fields: [requestedById], references: [id])
  reservation   Reservations      @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  LAB_MANAGER
}

enum ReservationStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("ApprovalStatus")
}
